#!/usr/bin/env python

import sys
import os
sys.path.append(os.path.join(os.path.dirname(__file__), os.path.pardir))
import ktbh.core
import ktbh.landing_page
import ktbh.unscrapable
import ktbh.csv_metadata
import ktbh.modelling
import ktbh.importer
import ktbh.publisher_name

from optparse import OptionParser
import ConfigParser

def get_config():
    config_file = os.path.join(os.path.dirname(__file__), 
			       os.path.pardir,
			       "etc", "ktbh.conf")
    config = ConfigParser.ConfigParser()
    config.read(config_file)
    return config

pipes = [
    ("examine-lps", "examine_lps", "Process landing pages",
     "out", ktbh.landing_page.examine_landing_page_callback),
    ("get-pubname", "get_pubname", "Get publisher's name",
     "url", ktbh.publisher_name.infer_publisher_code_callback),
    ("infer-dialect", "infer_dialect", "Infer CSV dialects",
     "pubnamed", ktbh.csv_metadata.infer_dialects_callback),
    ("infer-schema", "infer_schema", "Infer CSV schema",
     "schema", ktbh.csv_metadata.infer_schema_callback),
    ("infer-model", "infer_model", "Infer model",
     "download", ktbh.modelling.infer_model_callback),
    ("infer-spender", "infer_spender", "Infer spender column",
     "modelled", ktbh.modelling.infer_spender_callback),
    ("infer-supplier", "infer_supplier", "Infer recepient column",
     "modelled_from", ktbh.modelling.infer_supplier_callback),
    ("validate-model", "validate_model", "Validate model",
     "import", ktbh.modelling.validate_model_callback),
    ("importer", "importer", "Run importer",
     "ready", ktbh.importer.import_ds_callback),
    ("validate-csv", "validate_csv", "Validate CSV file imports",
     "try_import", ktbh.importer.validate_csv_callback)
]

def run():
    config = get_config()
    parser = OptionParser()

    parser.add_option("--add-lp", dest="add_landing_page",
                      help="Add a landing page URL")
    parser.add_option("--stash-unscrapables", dest="stash_unscrapables",
                      action="store_true",
                      help="Save unscrapable URLs")
    parser.add_option("--reset-database", dest="reset_database",
                      action="store_true",
                      help="Reset databases")

    for arg, var, help_text, _, _ in pipes:
        option_name = "--" + arg
        parser.add_option(option_name, dest=var, default=False,
                          action="store_true", help=help_text)

    options, args = parser.parse_args()

    driver = ktbh.core.KTBH(config)
    
    if options.reset_database:
        driver.delete_all_queues()
        return

    if options.add_landing_page:
        driver.add_landing_page(options.add_landing_page)
        return

    if options.stash_unscrapables:
        database_name = config.get("database", "name")
        cb = ktbh.unscrapable.handle_unscrapable_callback(database_name)
        driver.run_pipe("broken", cb)
        return

    for _, var, _, queue, callback in pipes:
        if getattr(options, var):
            driver.run_pipe(queue, callback)
            return

if __name__ == '__main__':
    run()
